(require r5rs)
(print-as-expression #f)
(print-mpair-curly-braces #f)

;; Oppgave 1

(define foo '(a b))
(define bar foo)
;;       +-----+-----+   +-----+-----+
;;       |     |     |   |     |    /|
;; foo-->|  +  |  +----->|  +  |   / |
;; bar-->|  |  |     |   |  |  |  /  |
;;       +--|--+-----+   +--|--+-----+
;;          |               |
;;          v               v
;;       +-----+         +-----+
;;       |     |         |     |
;;       |  a  |         |  b  |
;;       |     |         |     |
;;       +-----+         +-----+
;;
(set! foo '(c d))
;;       +-----+-----+   +-----+-----+
;;       |     |     |   |     |    /|
;; foo-->|  +  |  +----->|  +  |   / |
;;       |  |  |     |   |  |  |  /  |
;;       +--|--+-----+   +--|--+-----+
;;          |               |
;;          v               v
;;       +-----+         +-----+
;;       |     |         |     |
;;       |  c  |         |  d  |
;;       |     |         |     |
;;       +-----+         +-----+
;;
(set-car! foo bar)
;;       +-----+-----+   +-----+-----+
;;       |     |     |   |     |    /|
;; foo-->|  +  |  +----->|  +  |   / |
;;       |  |  |     |   |  |  |  /  |
;;       +--|--+-----+   +--|--+-----+
;;          |               |
;;          |               v
;;          |            +-----+
;;          |            |     |
;;          |            |  d  |
;;          |            |     |
;;          |            +-----+
;;          v
;;       +-----+-----+   +-----+-----+
;;       |     |     |   |     |    /|
;;       |  +  |  +----->|  +  |   / |
;;       |  |  |     |   |  |  |  /  |
;;       +--|--+-----+   +--|--+-----+
;;          |               |
;;          v               v
;;       +-----+         +-----+
;;       |     |         |     |
;;       |  a  |         |  b  |
;;       |     |         |     |
;;       +-----+         +-----+
(set-car! (cdr foo) (car foo))
;;       +-----+-----+   +-----+-----+
;;       |     |     |   |     |    /|
;; foo-->|  +  |  +----->|  +  |   / |
;;       |  |  |     |   |  |  |  /  |
;;       +--|--+-----+   +--|--+-----+
;;          |               |
;;          |               |
;;          |              /
;;          |             /
;;          |            /
;;          | +---------+
;;          | |
;;          v v
;;       +-----+-----+   +-----+-----+
;;       |     |     |   |     |    /|
;;       |  +  |  +----->|  +  |   / |
;;       |  |  |     |   |  |  |  /  |
;;       +--|--+-----+   +--|--+-----+
;;          |               |
;;          v               v
;;       +-----+         +-----+
;;       |     |         |     |
;;       |  a  |         |  b  |
;;       |     |         |     |
;;       +-----+         +-----+
;;
(set-cdr! bar (list 7))
;;
;;       +-----+-----+   +-----+-----+
;;       |     |     |   |     |    /|
;; foo-->|  +  |  +----->|  +  |   / |
;;       |  |  |     |   |  |  |  /  |
;;       +--|--+-----+   +--|--+-----+
;;          |              /
;;          |             /
;;          |            /
;;          | +---------+
;;          | |
;;          v v
;;       +-----+-----+   +-----+-----+
;;       |     |     |   |     |    /|
;; bar-->|  +  |  +----->|  +  |   / |
;;       |  |  |     |   |  |  |  /  |
;;       +--|--+-----+   +--|--+-----+
;;          |               |
;;          v               v
;;       +-----+         +-----+
;;       |     |         |     |
;;       |  a  |         |  7  |
;;       |     |         |     |
;;       +-----+         +-----+
;;
;; Oppg. 2

(define (x y z)
  (or (null? z)
      (and (y (car z))
	   (x y (cdr z)))))

;; Oppg. 3

(define (avg first . rest)
  (display 'avg)
  (let ((arguments (cons first rest)))
    (define (avg-rec lst iter sum)
      (if (null? lst)
	  (/ sum iter)
	  (avg-rec (cdr lst)
		   (+ 1 iter)
		   (+ (car lst) sum))))
    (avg-rec arguments 0 0)))

;; Oppg. 4

(define sum 100)
(define (make-acc sum)
(lambda (x)
(set! sum (+ sum x))
sum))
(define a (make-acc sum))
(define b (make-acc 200))
(a 10)
(let ((sum 30))
  (b sum))
