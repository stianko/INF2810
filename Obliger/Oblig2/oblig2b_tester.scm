;; test-prosedyrer for oblig 2b i inf2810, 2015.
;;
;; larstvei pÃ¥ ifi.uio.no

(define (print-test-result expression expect res)
  (if (equal? res expect)
      (for-each display (list "Success: " expression " -> " res "\n"))
      (for-each display (list "Error: " expression " -> " res
                              ", but expected " expect "\n"))))
(define-syntax test
  (syntax-rules ()
    ((test expression expect)
     (print-test-result 'expression expect expression))))

;; Test `make-stack'
(define (test-stack)
  (define s1 (make-stack (list 'foo 'bar)))
  (define s2 (make-stack '()))
  (s1 'pop!)
  (test (s1 'stack) '(bar))
  (s2 'push! 1 2 3 4)
  (test (s2 'stack) '(4 3 2 1))
  (s1 'push! 'bah)
  (s1 'push! 'zap 'zip 'baz)
  (test (s1 'stack) '(baz zip zap bah bar))
  (set! s1 (make-stack (list 'foo 'bar)))
  (set! s2 (make-stack '()))
  (pop! s1)
  (test (stack s1) '(bar))
  (push! s2 1 2 3 4)
  (test (stack s2) '(4 3 2 1))
  (push! s1 'bah)
  (push! s1 'zap 'zip 'baz)
  (test (stack s1) '(baz zip zap bah bar))
  (define lst (list 'a 'b 'c))
  (define s3 (make-stack lst))
  (s3 'pop!)
  (test lst '(a b c))
  (s3 'push! 'd 'e)
  (test lst '(a b c)))

;; Test `cycle?'
(define (test-cycle)
  (define bah (list 'a 'b 'c))
  (set-car! bah (cdr bah))
  (define bar (list 'a 'b 'c 'd 'e))
  (set-cdr! (cdddr bar) (cdr bar))
  (define baz (list 'a))
  (set-cdr! baz baz)
  (test (cycle? '(hey ho asdf asdf)) #f)
  (test (cycle? bah) #f)
  (test (cycle? bar) #t)
  (test (cycle? baz) #t)
  (define lst (list 'a 'b 'c))
  (cycle? lst)
  (test lst '(a b c))
  (test (cycle? '()) #f)
  (test (cycle? (list 'a)) #f)
  (test (cycle? (list 'a 'a)) #f)
  (test (cycle? (list 'a 'a 'a)) #f)
  (test (cycle? '(a (a) (a a) (a a a) (a a a) (a a) (a) a a (a) (a a) (a a a)
                    (a a a) (a a) (a) aa (a) (a a) (a a a) (a a a) (a a)
                    (a) a a (a) (a a) (a a a) (a a a) (a a) (a) aa (a) (a a)
                    (a a a) (a a a) (a a) (a) a a (a) (a a) (a a a) (a a a)
                    (a a) (a) aa (a) (a a) (a a a) (a a a) (a a) (a) a a
                    (a) (a a) (a a a) (a a a) (a a) (a) aa (a) (a a) (a a a)
                    (a a a) (a a) (a) a a (a) (a a) (a a a) (a a a) (a a)
                    (a) aa (a) (a a) (a a a) (a a a) (a a) (a) a a (a) (a a)
                    (a a a) (a a a) (a a) (a) aa (a) (a a) (a a a) (a a a)
                    (a a) (a) a a (a) (a a) (a a a) (a a a) (a a) (a) aa
                    (a) (a a) (a a a) (a a a) (a a) (a) a a (a) (a a) (a a a)
                    (a a a) (a a) (a) aa (a) (a a) (a a a) (a a a) (a a)
                    (a) a a (a) (a a) (a a a) (a a a) (a a) (a) aa (a) (a a)
                    (a a a) (a a a) (a a) (a) a a (a) (a a) (a a a) (a a a)
                    (a a) (a) aa (a) (a a) (a a a) (a a a) (a a) (a) a a
                    (a) (a a) (a a a) (a a a) (a a) (a) aa (a) (a a) (a a a)
                    (a a a) (a a) (a) a a (a) (a a) (a a a) (a a a) (a a)
                    (a) aa (a) (a a) (a a a) (a a a) (a a) (a) a a (a) (a a)
                    (a a a) (a a a) (a a) (a) aa (a) (a a) (a a a) (a a a)
                    (a a) (a) a a (a) (a a) (a a a) (a a a) (a a) (a) aa
                    (a) (a a) (a a a) (a a a) (a a) (a) a a (a) (a a) (a a a)
                    (a a a) (a a) (a) aa (a) (a a) (a a a) (a a a) (a a)
                    (a) a a (a) (a a) (a a a) (a a a) (a a) (a) a)) #f))

;; Test `make-ring'
(define (test-ring)
  (define r1 (make-ring (list 1 2 3 4)))
  (define r2 (make-ring (list 'a 'b 'c 'd)))
  (test (top r1) 1)
  (test (top r2) 'a)
  (test (right-rotate! r1) 4)
  (test (left-rotate! r1) 1)
  (test (left-rotate! r1) 2)
  (test (delete! r1) 3)
  (test (left-rotate! r1) 4)
  (test (left-rotate! r1) 1)
  (test (left-rotate! r1) 3)
  (test (insert! r2 'x) 'x)
  (test (right-rotate! r2) 'd)
  (test (left-rotate! r2) 'x)
  (test (left-rotate! r2) 'a)
  (test (top r1) 3)
  (define lst (list 'a 'b 'c))
  (define r3 (make-ring lst))
  (test lst '(a b c))
  (top r3)
  (insert! r3 'e)
  (insert! r3 'f)
  (delete! r3)
  (right-rotate! r3)
  (right-rotate! r3)
  (left-rotate! r3)
  (test lst '(a b c)))
